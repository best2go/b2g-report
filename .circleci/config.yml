# PHP CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-php/
version: 2

#executors:
#  docker: # Docker using the Base Convenience Image
#    docker:
#      - image: php:$*-cli-alpine

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:

  build:
    #    machine:
    #      docker: ubuntu-2004:2022.04.1

    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # Specify the version you desire here
      #- image: circleci/php:7.4-node-browsers # legacy
      #- image: cimg/php:7.4.26
      - image: cimg/php:8.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      - run: sudo pecl install pcov
      - run: sudo composer selfupdate

      #- run: sudo apt update # PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      #- run: sudo docker-php-ext-install zip

      - run: php -v
      - run: php -m
      - run: composer config platform.php 8.1

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer update --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      #- restore_cache:
      #    keys:
      #      - node-v1-{{ checksum "package.json" }}
      #      - node-v1-
      #- run: yarn install
      #- save_cache:
      #    key: node-v1-{{ checksum "package.json" }}
      #    paths:
      #      - node_modules

      # prepare the database
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run

      - run: mkdir -p ./build/logs
      - run: ./vendor/bin/phpunit --testdox --coverage-text --coverage-clover ./build/logs/coverage.xml --log-junit ./build/logs/junit.xml
      - store_test_results:
          path: ./build/logs